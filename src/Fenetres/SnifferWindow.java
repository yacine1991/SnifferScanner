package Fenetres;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.packet.format.FormatUtils;
import org.jnetpcap.protocol.lan.Ethernet;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.network.Ip6;
import org.jnetpcap.protocol.tcpip.Tcp;
import org.jnetpcap.protocol.tcpip.Udp;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author Yacine
 */
public class SnifferWindow extends javax.swing.JFrame {

    private ArrayList listData = new ArrayList();
    int Variable = 0;
    PcapPacket packet1;
    String packetsString;
    ArrayList<Object> headerPacket;
    String info = null;
    private String itemCourant;
    private String nomInterface;
    private int indexItemCourant;
    Vector version;
    Vector version2;
    Vector<Object> indice;
    Vector<Object> typeHeader;
    Vector<Object> longueurEnTete;
    Vector<Object> service;
    Vector<Object> longueurTotale;
    Vector<Object> identification;
    Vector<Object> indicateur;
    Vector<Object> offset;
    Vector<Object> dureeVie;
    Vector<Object> protocole;
    Vector<Object> checksum;
    Vector<Object> adresseSource;
    Vector<Object> adresseDestination;
    Vector<Object> optionRemplissage;
    Vector<Object> typeHeader2;
    Vector<Object> longueurEnTete2;
    Vector<Object> service2;
    Vector<Object> longueurTotale2;
    Vector<Object> identification2;
    Vector<Object> indicateur2;
    Vector<Object> offset2;
    Vector<Object> dureeVie2;
    Vector<Object> protocole2;
    Vector<Object> checksum2;
    Vector<Object> adresseSource2;
    Vector<Object> adresseDestination2;
    Vector<Object> optionRemplissage2;

    /**
     * Creates new form SnifferWindow
     */
    public SnifferWindow() throws IOException {
        initComponents();
        setTitle("Scanner");
        recupererInterfaces();
        indice = new Vector();
        typeHeader = new Vector();
        version = new Vector();
        longueurEnTete = new Vector<>();
        service = new Vector<>();
        longueurTotale = new Vector<>();
        identification = new Vector<>();
        indicateur = new Vector<>();
        offset = new Vector<>();
        dureeVie = new Vector<>();
        protocole = new Vector<>();
        checksum = new Vector<>();
        adresseSource = new Vector<>();
        adresseDestination = new Vector<>();
        optionRemplissage = new Vector<>();
        typeHeader2 = new Vector();
        version2 = new Vector();
        longueurEnTete2 = new Vector<>();
        service2 = new Vector<>();
        longueurTotale2 = new Vector<>();
        identification2 = new Vector<>();
        indicateur2 = new Vector<>();
        offset2 = new Vector<>();
        dureeVie2 = new Vector<>();
        protocole2 = new Vector<>();
        checksum2 = new Vector<>();
        adresseSource2 = new Vector<>();
        adresseDestination2 = new Vector<>();
        optionRemplissage2 = new Vector<>();
        this.jTextArea1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        interfacesComboBox = new javax.swing.JComboBox();
        plusInformationjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nombrePaquetsALireTextfield = new javax.swing.JTextField();
        lirePaquetsBoutton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        paquetsJTable = new javax.swing.JTable();
        rechercheComboBox = new javax.swing.JComboBox();
        rechercheTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultatRecherchejTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonData = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        dumpPacketMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Interface Réseau :");

        interfacesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interfacesComboBoxActionPerformed(evt);
            }
        });

        plusInformationjButton.setText("?");
        plusInformationjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusInformationjButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Paquets à lire");

        nombrePaquetsALireTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombrePaquetsALireTextfieldActionPerformed(evt);
            }
        });

        lirePaquetsBoutton.setText("Read");
        lirePaquetsBoutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lirePaquetsBouttonActionPerformed(evt);
            }
        });

        paquetsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(paquetsJTable);

        rechercheComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IP", "Protocole" }));

        rechercheTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Recherche");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        resultatRecherchejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(resultatRecherchejTable);

        jLabel3.setText("Rechercher dans les en-tête des paquets");

        jTextArea1.setBackground(new java.awt.Color(0, 51, 51));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 204, 0));
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jButtonData.setText("Afficher données du paquets");
        jButtonData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDataActionPerformed(evt);
            }
        });

        jMenu1.setText("Options");

        dumpPacketMenuItem.setText("Dump Packets");
        dumpPacketMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dumpPacketMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(dumpPacketMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1047, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(interfacesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(plusInformationjButton)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nombrePaquetsALireTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lirePaquetsBoutton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rechercheTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(rechercheComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(123, 123, 123))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(31, 31, 31))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButtonData)
                                        .addGap(96, 96, 96)))))
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(interfacesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plusInformationjButton)
                    .addComponent(jLabel2)
                    .addComponent(nombrePaquetsALireTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lirePaquetsBoutton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rechercheTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rechercheComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void interfacesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interfacesComboBoxActionPerformed
        itemCourant = (String) interfacesComboBox.getSelectedItem();
        System.out.println("Itemcourant : " + itemCourant);
        indexItemCourant = interfacesComboBox.getSelectedIndex();
        System.out.println("Index item courant depuis combo" + indexItemCourant);
    }//GEN-LAST:event_interfacesComboBoxActionPerformed

    private void recupererInformationsInterfaceUnique(String itemChoisi) {
        List<PcapIf> alldevs = new ArrayList<>(); // Will be filled with NICs
        StringBuilder errbuf = new StringBuilder(); // For any error msgs
        int r = Pcap.findAllDevs(alldevs, errbuf);
        itemChoisi = (String) itemChoisi.substring(0, itemChoisi.length() - 2);

        if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
            System.err.printf("Can't read list of devices, error is %s", errbuf.toString());
            return;
        }
        System.out.println("Network devices found:");
        for (PcapIf device : alldevs) {
            if (itemChoisi.equals(device.getDescription())) {
                info = ("Decription : " + device.getDescription() + "\n Name : " + device.getName()
                        + "\n Adresses : " + device.getAddresses().toString() + "\n Flags : " + device.getFlags());
            }
        }
    }

    private void sendPackets(int nombrePaquets, String nomDevice, StringBuilder errbuf) {
        int snaplen = 64 * 1024;           // Capture all packets, no trucation
        int flags = Pcap.MODE_PROMISCUOUS; // capture all packets
        int timeout = 10 * 1000;           // 10 seconds in millis
        Pcap pcap =
                Pcap.openLive(nomDevice, snaplen, flags, timeout, errbuf);

        if (pcap == null) {
            System.err.printf("Error while opening device for capture: "
                    + errbuf.toString());
        }

    }

    private void plusInformationjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusInformationjButtonActionPerformed
        recupererInformationsInterfaceUnique(itemCourant);
        JOptionPane.showMessageDialog(this, info);
    }//GEN-LAST:event_plusInformationjButtonActionPerformed

    private void lirePaquetsBouttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lirePaquetsBouttonActionPerformed
        if ("".equals(nombrePaquetsALireTextfield.getText().toString())) {//Tester si c des lettres
            JOptionPane.showMessageDialog(this, "Entrez un nombre de paquets a lire ");
        } else {
            lirePaquets();
        }
    }//GEN-LAST:event_lirePaquetsBouttonActionPerformed

    private void nombrePaquetsALireTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombrePaquetsALireTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombrePaquetsALireTextfieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String recherche = rechercheTextField.getText().toString();
        System.out.println("recherche : " + recherche);
        DefaultTableModel dtmResultatRecherche = new DefaultTableModel();

        System.out.println("id = " + this.paquetsJTable.getSelectedRow());
        
        typeHeader2 = new Vector();
        version2 = new Vector();
        longueurEnTete2 = new Vector<>();
        service2 = new Vector<>();
        longueurTotale2 = new Vector<>();
        identification2 = new Vector<>();
        indicateur2 = new Vector<>();
        offset2 = new Vector<>();
        dureeVie2 = new Vector<>();
        protocole2 = new Vector<>();
        checksum2 = new Vector<>();
        adresseSource2 = new Vector<>();
        adresseDestination2 = new Vector<>();
        optionRemplissage2 = new Vector<>();

        resultatRecherchejTable.removeAll();
        resultatRecherchejTable.repaint();
        if (rechercheComboBox.getSelectedItem().toString().equals("IP")) {
            for (int i = 0; i < this.paquetsJTable.getRowCount(); i++) {
                System.out.println(this.adresseSource.get(i));
                if (recherche.equals(this.adresseSource.get(i).toString())) {

                    typeHeader2.addElement(this.typeHeader.get(i));
                    version2.add(this.version.get(i));
                    longueurEnTete2.addElement(this.longueurEnTete.get(i));
                    service2.addElement(this.service.get(i));
                    longueurTotale2.addElement(this.longueurTotale.get(i));
                    identification2.addElement(this.identification.get(i));
                    indicateur2.addElement(this.indicateur.get(i));
                    offset2.addElement(this.offset.get(i));
                    dureeVie2.addElement(this.dureeVie.get(i));
                    checksum2.addElement(this.checksum.get(i));
                    adresseSource2.addElement(this.adresseSource.get(i));
                    adresseDestination2.addElement(this.adresseDestination.get(i));
                }
            }
        } else if (rechercheComboBox.getSelectedItem().toString().equals("Protocole")) {
            for (int i = 0; i < this.paquetsJTable.getRowCount(); i++) {
                if (recherche.equals(this.typeHeader.get(i))) {

                    typeHeader2.addElement(this.typeHeader.get(i));
                    version2.add(this.version.get(i));
                    longueurEnTete2.addElement(this.longueurEnTete.get(i));
                    service2.addElement(this.service.get(i));
                    longueurTotale2.addElement(this.longueurTotale.get(i));
                    identification2.addElement(this.identification.get(i));
                    indicateur2.addElement(this.indicateur.get(i));
                    offset2.addElement(this.offset.get(i));
                    dureeVie2.addElement(this.dureeVie.get(i));
                    checksum2.addElement(this.checksum.get(i));
                    adresseSource2.addElement(this.adresseSource.get(i));
                    adresseDestination2.addElement(this.adresseDestination.get(i));
                }
            }
        }

        dtmResultatRecherche.addColumn("Type Header", typeHeader2);
        dtmResultatRecherche.addColumn("Version", version2);
        dtmResultatRecherche.addColumn("Longueur d'en-tête", longueurEnTete2);
        dtmResultatRecherche.addColumn("Service", service2);
        dtmResultatRecherche.addColumn("Longueur totale", longueurTotale2);
        dtmResultatRecherche.addColumn("Identification", identification2);
        dtmResultatRecherche.addColumn("Indicateur", indicateur2);
        dtmResultatRecherche.addColumn("Offset", offset2);
        dtmResultatRecherche.addColumn("Durée de vie", dureeVie2);
        dtmResultatRecherche.addColumn("Checksum", checksum2);
        dtmResultatRecherche.addColumn("Adresse source", adresseSource2);
        dtmResultatRecherche.addColumn("Adresse destination", adresseDestination2);
        resultatRecherchejTable.setModel(dtmResultatRecherche);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rechercheTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rechercheTextFieldActionPerformed

    private void dumpPacketMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dumpPacketMenuItemActionPerformed

        JOptionPane.showMessageDialog(this, "Enregistrement");
        try {
            dumpPackets(packetsString);
        } catch (IOException ex) {
            Logger.getLogger(SnifferWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dumpPacketMenuItemActionPerformed

    private void jButtonDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDataActionPerformed
        // TODO add your handling code here:
        this.jTextArea1.setText("");
        int num = this.paquetsJTable.getSelectedRow();
        if (num != -1) {
            System.out.println("num = " + num);
            num = num / 3;

            this.jTextArea1.setText((String)this.listData.get(num));
        }
    }//GEN-LAST:event_jButtonDataActionPerformed

    public void recupererInterfaces() throws IOException {
        List<PcapIf> alldevs = new ArrayList<PcapIf>(); // Will be filled with NICs
        StringBuilder errbuf = new StringBuilder(); // For any error msgs
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        int r = Pcap.findAllDevs(alldevs, errbuf);
        if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
            System.err.printf("Can't read list of devices, error is %s", errbuf.toString());
            return;
        }

        System.out.println("Network devices found:");

        int i = 0;
        for (PcapIf device : alldevs) {
            String description =
                    (device.getDescription() != null) ? device.getDescription()
                    : "No description available";


            //info=(device.getAddresses().toString());

            System.out.printf("#%d: %s [%s]\n", i++, device.getName(), description);
            dcbm.addElement(device.getDescription() + " " + i);
        }

        PcapIf device = alldevs.get(0); // We know we have atleast 1 device
        System.out.printf("\nChoosing '%s' on your behalf:\n",
                (device.getDescription() != null) ? device.getDescription()
                : device.getName());

        interfacesComboBox.setModel(dcbm);
    }

    public void dumpPackets(String packetString) throws IOException {
        Date maDate = new Date();
        FileWriter fw = new FileWriter("Log" + maDate.toString().replaceAll(" ", "_").replaceAll(":", "_") + ".txt", true);
        fw.append(packetString);
        fw.close();
    }

    public void lirePaquets() {       
        typeHeader = new Vector();
        version = new Vector();
        longueurEnTete = new Vector<>();
        service = new Vector<>();
        longueurTotale = new Vector<>();
        identification = new Vector<>();
        indicateur = new Vector<>();
        offset = new Vector<>();
        dureeVie = new Vector<>();
        protocole = new Vector<>();
        checksum = new Vector<>();
        adresseSource = new Vector<>();
        adresseDestination = new Vector<>();
        optionRemplissage = new Vector<>();
        this.paquetsJTable.removeAll();
        this.paquetsJTable.repaint();
        System.out.println("Entrer Fonction Lirepaquets");
        List<PcapIf> alldevs = new ArrayList<PcapIf>(); // Will be filled with NICs
        StringBuilder errbuf = new StringBuilder(); // For any error msgs
        DefaultTableModel dtmPaquets = new DefaultTableModel();


        int r = Pcap.findAllDevs(alldevs, errbuf);
        if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
            System.err.printf("Can't read list of devices, error is %s", errbuf.toString());
            return;
        }

        System.out.println("Network devices found:");
        System.out.println("indexitem courant " + indexItemCourant);
        PcapIf device = alldevs.get(indexItemCourant); // We know we have atleast 1 device
        int snaplen = 64 * 1024;           // Capture all packets, no trucation
        int flags = Pcap.MODE_PROMISCUOUS; // capture all packets
        int timeout = 10 * 1000;           // 10 seconds in millis
        Pcap pcap =
                Pcap.openLive(device.getName(), snaplen, flags, timeout, errbuf);
        System.out.println("Open live ");
        if (pcap == null) {
            System.err.printf("Error while opening device for capture: "
                    + errbuf.toString());
            return;
        }
        headerPacket = new ArrayList<>();
        PcapPacketHandler<String> jpacketHandler;
        jpacketHandler = new PcapPacketHandler<String>() {
            @Override
            public void nextPacket(PcapPacket packet, String user) {

                Ip4 ip4 = packet.getHeader(new Ip4());

                Ip6 ip6 = packet.getHeader(new Ip6());

                Tcp tcp = packet.getHeader(new Tcp());

                Udp udp = packet.getHeader(new Udp());

                Ethernet eth = packet.getHeader(new Ethernet());
                System.out.println(packet.toHexdump());
                listData.add(packet.toHexdump());
                packetsString += packet.toString();
                packetsString += "\n*********************************NEXT PACKET********************************************\n";


//System.out.println(packet.toString());
                if (ip6 != null) {
                    System.out.println("Dans if");
                    typeHeader.addElement("IPv6");
                    version.add(ip6.version());
                    longueurEnTete.addElement(ip6.getHeaderLength());
                    service.addElement("null");
                    longueurTotale.addElement(ip6.length());
                    identification.addElement("null");
                    indicateur.addElement("null");
                    offset.addElement("null");
                    dureeVie.addElement("null");
                    checksum.addElement("null");
                    adresseSource.addElement(FormatUtils.ip(ip6.source()));
                    adresseDestination.addElement(FormatUtils.ip(ip6.destination()));

                }
                if (ip4 != null) {
                    System.out.println("Dans if");
                    typeHeader.addElement("IPv4");
                    version.add(ip4.version());
                    longueurEnTete.addElement(ip4.getHeaderLength());
                    service.addElement(ip4.type());
                    longueurTotale.addElement(ip4.length());
                    identification.addElement(ip4.id());
                    indicateur.addElement(ip4.flags());
                    offset.addElement(ip4.offset());
                    dureeVie.addElement(ip4.ttl());
                    checksum.addElement(ip4.checksum());
                    adresseSource.addElement(FormatUtils.ip(ip4.source()));
                    adresseDestination.addElement(FormatUtils.ip(ip4.destination()));

                }
                if (tcp != null) {
                    System.out.println("Dans if");
                    typeHeader.addElement("TCP");
                    version.add("null");
                    longueurEnTete.addElement(tcp.getHeaderLength());
                    service.addElement("null");
                    longueurTotale.addElement("null");
                    identification.addElement("null");
                    indicateur.addElement(tcp.flags());
                    offset.addElement("null");
                    dureeVie.addElement("null");
                    checksum.addElement(tcp.checksum());
                    adresseSource.addElement(tcp.source());
                    adresseDestination.addElement(tcp.destination());

                }
                if (udp != null) {
                    System.out.println("Dans if");
                    typeHeader.addElement("UDP");
                    version.add("null");
                    longueurEnTete.addElement(udp.getHeaderLength());
                    service.addElement("null");
                    longueurTotale.addElement("null");
                    identification.addElement("null");
                    indicateur.addElement("null");
                    offset.addElement("null");
                    dureeVie.addElement("null");
                    checksum.addElement(udp.checksum());
                    adresseSource.addElement(udp.source());
                    adresseDestination.addElement(udp.destination());

                }
                if (eth != null) {
                    System.out.println("Dans if thernet");
                    typeHeader.addElement("Ethernet");
                    version.addElement("null");
                    longueurEnTete.addElement(eth.getHeaderLength());
                    service.addElement("null");
                    longueurTotale.addElement("null");
                    identification.addElement("null");
                    indicateur.addElement("null");
                    offset.addElement("null");
                    dureeVie.addElement("null");
                    checksum.addElement("null");
                    adresseSource.addElement(FormatUtils.ip(eth.source()));
                    adresseDestination.addElement(FormatUtils.ip(eth.destination()));
                }


            }
        };
        pcap.loop(Integer.parseInt(nombrePaquetsALireTextfield.getText().toString()), jpacketHandler, "");

        dtmPaquets.addColumn("Type Header", typeHeader);
        dtmPaquets.addColumn("Version", version);
        dtmPaquets.addColumn("Longueur d'en-tête", longueurEnTete);
        dtmPaquets.addColumn("Service", service);
        dtmPaquets.addColumn("Longueur totale", longueurTotale);
        dtmPaquets.addColumn("Identification", identification);
        dtmPaquets.addColumn("Indicateur", indicateur);
        dtmPaquets.addColumn("Offset", offset);
        dtmPaquets.addColumn("Durée de vie", dureeVie);
        dtmPaquets.addColumn("Checksum", checksum);
        dtmPaquets.addColumn("Adresse source", adresseSource);
        dtmPaquets.addColumn("Adresse destination", adresseDestination);


        paquetsJTable.setModel(dtmPaquets);
        pcap.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnifferWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnifferWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnifferWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnifferWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new SnifferWindow().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(SnifferWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem dumpPacketMenuItem;
    private javax.swing.JComboBox interfacesComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton lirePaquetsBoutton;
    private javax.swing.JTextField nombrePaquetsALireTextfield;
    private static javax.swing.JTable paquetsJTable;
    private javax.swing.JButton plusInformationjButton;
    private javax.swing.JComboBox rechercheComboBox;
    private javax.swing.JTextField rechercheTextField;
    private javax.swing.JTable resultatRecherchejTable;
    // End of variables declaration//GEN-END:variables
}
